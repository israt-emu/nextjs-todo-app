generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  userId     Int        @id @default(autoincrement())
  email      String     @unique
  profession String?
  bio        String?
  phone      String
  name       String
  password   String
  photo      String?
  address    String?
  todos      Todo[]
  notes      Note[]
  Category   Category[]
}

model Category {
  id     Int            @id @default(autoincrement())
  name   String         @unique
  userId Int?
  user   User?          @relation(fields: [userId], references: [userId])
  todos  TodoCategory[]
}

model Color {
  id      Int    @id @default(autoincrement())
  name    String
  hexCode String
  notes   Note[]
}

model Todo {
  id         Int            @id @default(autoincrement())
  title      String
  dueDate    DateTime?
  reminder   DateTime?
  priority   Priority
  completed  Boolean        @default(false)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  userId     Int
  user       User           @relation(fields: [userId], references: [userId])
  categories TodoCategory[]
}

model Note {
  id         Int      @id @default(autoincrement())
  title      String
  coverImg   String?
  coverEmoji String?
  content    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  colorId    Int?
  user       User     @relation(fields: [userId], references: [userId])
  color      Color?   @relation(fields: [colorId], references: [id])
}

model TodoCategory {
  todo       Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  todoId     Int
  categoryId Int

  @@id([todoId, categoryId])
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}
